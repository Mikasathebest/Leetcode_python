三数之和
Given an array nums of n integers,   
are there elements a, b, c in nums such that a + b + c = 0?   
Find all unique triplets in the array which gives the sum of zero.

题目： 求解一个序列中所有可能的三数之和为0的结果，即寻找不重复的 a+b+c =0

思路1：两重循环，将第三个数 c = -a-b 存在字典里（相比暴力查询，节约了一重循环）
时间复杂度 O(n^2)
```python
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        #two loop find
        #boundry
        
        if len(nums)<3: return []
        
        nums.sort()
        res = set()
        
        for i, a in enumerate(nums[:-2]):
            if a == nums[i-1] and i >= 1:  #与上一个重复，且不是首个，跳出此次循环
                continue
            
            d = {}
            for b in nums[i+1:]:
                if b not in d:
                    d[-a-b] = 1
                else:
                    res.add((a,-a-b,b))
        return map(list,res)
            
```
思路2：先对数据排序。   固定一个数a，一次循环遍历，然后在剩余的序列中，定义两个指针b,c，左右夹逼，判断 a+b+c == 0 
```python
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        #排序，设定一个位置，然后在剩下的序列里夹逼寻找
        res = []
        nums.sort()
        
        for i in range(len(nums)-2):
            if i >0 and nums[i] == nums[i-1]:
                continue
            l, r = i+1, len(nums)-1
            
            while l < r:
                s = nums[i] + nums [l] + nums[r]
                if s < 0:
                    l += 1
                elif s >0:
                    r -= 1
                else:
                    res.append([nums[i], nums [l], nums[r]])
                    #以下判断重复
                    while l < r and nums[l] == nums[l+1]:
                        l += 1
                    while l < r and nums[r] == nums[r-1]:
                        r -= 1
                    l +=1; r -= 1
        return res
```
