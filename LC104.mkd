## 111. Minimum Depth of Binary Tree

题目：找到二叉树的最小深度

思路1：递归 

```python
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root: return 0
        #没有左子树，判断右子树最小深度+1 即可
        if not root.left: return 1 + self.minDepth(root.right)
        #同理，没有右子树，用左子树最小深度+1 即可
        if not root.right: return 1 + self.minDepth(root.left)
        
        #Divide and Conquer 分治法，寻找左右子树中较小的深度
        left = self.minDepth(root.left)
        right = self.minDepth(root.right)
        
        result = 1 + min(left, right)
        
        return result
```

思路2 BFS 逐层寻找 记录深度
```python
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        #BFS
        if not root: return 0
        
        depth = 0
        current_level = [root]
        
        while current_level:
            depth += 1
            next_level = []
            for node in current_level:
                left = node.left
                right = node.right
                if not left and not right:
                    return depth
                if left:
                    next_level.append(left)
                if right:
                    next_level.append(right)
                    
            current_level = next_level
            
        return depth
```
